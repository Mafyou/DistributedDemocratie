@page "/active-votes"
@rendermode InteractiveAuto
@using DistributedDemocratie.Models
@using DistributedDemocratie.Services
@inject ILawService LawService
@inject NavigationManager Navigation

<PageTitle>Votes Actifs - Démocratie Distribuée</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4">??? Votes Actifs</h1>
            <p class="lead">Participez dès maintenant aux votes en cours et faites entendre votre voix.</p>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else if (!activeVotingLaws.Any())
    {
        <div class="text-center mt-5">
            <i class="bi bi-ballot display-1 text-muted"></i>
            <h3 class="mt-3">Aucun vote actif</h3>
            <p class="text-muted">Il n'y a actuellement aucun vote en cours. Revenez plus tard ou proposez une nouvelle loi.</p>
            <a href="/propose-law" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Proposer une loi
            </a>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col">
                <div class="alert alert-success">
                    <i class="bi bi-info-circle"></i>
                    <strong>@activeVotingLaws.Count</strong> vote(s) en cours. Votre participation est importante !
                </div>
            </div>
        </div>

        <div class="row">
            @foreach (var law in activeVotingLaws)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 border-success shadow">
                        <div class="card-header bg-success text-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-light text-dark">@GetTypeName(law.Type)</span>
                                <small><i class="bi bi-clock"></i> @GetTimeRemaining(law)</small>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@law.Title</h5>
                            <p class="card-text">@law.Description</p>
                            
                            @if (law.Tags.Any())
                            {
                                <div class="mb-3">
                                    @foreach (var tag in law.Tags)
                                    {
                                        <span class="badge bg-secondary me-1">#@tag</span>
                                    }
                                </div>
                            }

                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-1">
                                    <small>Pour: @law.VotesFor</small>
                                    <small>Contre: @law.VotesAgainst</small>
                                </div>
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar bg-success" role="progressbar" 
                                         style="width: @(GetVotePercentage(law, VoteChoice.For))%" 
                                         title="Pour: @law.VotesFor votes">
                                    </div>
                                    <div class="progress-bar bg-danger" role="progressbar" 
                                         style="width: @(GetVotePercentage(law, VoteChoice.Against))%" 
                                         title="Contre: @law.VotesAgainst votes">
                                    </div>
                                    <div class="progress-bar bg-warning" role="progressbar" 
                                         style="width: @(GetVotePercentage(law, VoteChoice.Abstain))%" 
                                         title="Abstention: @law.VotesAbstain votes">
                                    </div>
                                </div>
                                <div class="d-flex justify-content-between mt-1">
                                    <small class="text-muted">Total: @law.TotalVotes votes</small>
                                    <small class="@(law.VotesFor > law.VotesAgainst ? "text-success" : "text-danger")">
                                        @(law.VotesFor > law.VotesAgainst ? "En voie d'adoption" : "En voie de rejet")
                                    </small>
                                </div>
                            </div>

                            <small class="text-muted">
                                Proposé par: @law.CreatedBy<br />
                                Vote jusqu'au: @(law.VotingEndDate?.ToString("dd/MM/yyyy à HH:mm") ?? "Date non définie")
                            </small>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-success w-100" @onclick="() => ViewLaw(law.Id)">
                                <i class="bi bi-ballot-check"></i> Voter maintenant
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="row mt-4">
            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><i class="bi bi-lightbulb"></i> Conseils pour voter</h5>
                        <ul class="list-unstyled">
                            <li><i class="bi bi-check-circle text-success"></i> Lisez attentivement le texte complet de la loi</li>
                            <li><i class="bi bi-check-circle text-success"></i> Réfléchissez aux conséquences à long terme</li>
                            <li><i class="bi bi-check-circle text-success"></i> Votre vote est définitif et ne peut pas être modifié</li>
                            <li><i class="bi bi-check-circle text-success"></i> Vous pouvez vous abstenir si vous n'êtes pas sûr</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Law> activeVotingLaws = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadActiveVotes();
    }

    private async Task LoadActiveVotes()
    {
        isLoading = true;
        activeVotingLaws = await LawService.GetActiveVotingLawsAsync();
        isLoading = false;
        StateHasChanged();
    }

    private void ViewLaw(int lawId)
    {
        Navigation.NavigateTo($"/law/{lawId}");
    }

    private string GetTypeName(LawType type)
    {
        return type switch
        {
            LawType.Law => "Loi",
            LawType.Decree => "Décret",
            LawType.Amendment => "Amendement",
            LawType.Referendum => "Référendum",
            LawType.LocalInitiative => "Initiative locale",
            _ => type.ToString()
        };
    }

    private string GetTimeRemaining(Law law)
    {
        if (law.VotingEndDate == null) return "Permanent";
        
        var timeLeft = law.VotingEndDate.Value - DateTime.Now;
        if (timeLeft.TotalSeconds <= 0) return "Terminé";
        
        if (timeLeft.TotalDays >= 1)
            return $"{(int)timeLeft.TotalDays}j {timeLeft.Hours}h";
        
        if (timeLeft.TotalHours >= 1)
            return $"{(int)timeLeft.TotalHours}h {timeLeft.Minutes}m";
            
        return $"{(int)timeLeft.TotalMinutes}m";
    }

    private double GetVotePercentage(Law law, VoteChoice choice)
    {
        if (law.TotalVotes == 0) return 0;
        
        return choice switch
        {
            VoteChoice.For => (double)law.VotesFor / law.TotalVotes * 100,
            VoteChoice.Against => (double)law.VotesAgainst / law.TotalVotes * 100,
            VoteChoice.Abstain => (double)law.VotesAbstain / law.TotalVotes * 100,
            _ => 0
        };
    }
}