@page "/laws"
@rendermode InteractiveAuto
@using DistributedDemocratie.Models
@using DistributedDemocratie.Services
@inject ILawService LawService
@inject NavigationManager Navigation

<PageTitle>Lois et Décrets - Démocratie Distribuée</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4">??? Lois et Décrets</h1>
            <p class="lead">Participez à la démocratie directe en votant sur les lois et décrets proposés par les citoyens.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Rechercher une loi..." @bind="searchQuery" @onkeypress="OnSearchKeyPress" />
                <button class="btn btn-outline-primary" @onclick="SearchLaws">
                    <i class="bi bi-search"></i> Rechercher
                </button>
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedType">
                <option value="">Tous les types</option>
                <option value="@LawType.Law">Lois</option>
                <option value="@LawType.Decree">Décrets</option>
                <option value="@LawType.Amendment">Amendements</option>
                <option value="@LawType.Referendum">Référendums</option>
                <option value="@LawType.LocalInitiative">Initiatives locales</option>
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedStatus">
                <option value="">Tous les statuts</option>
                <option value="@LawStatus.Voting">En cours de vote</option>
                <option value="@LawStatus.UnderReview">En révision</option>
                <option value="@LawStatus.Passed">Adoptées</option>
                <option value="@LawStatus.Rejected">Rejetées</option>
            </select>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col">
            <button class="btn btn-success me-2" @onclick="ShowActiveVotes">
                <i class="bi bi-ballot-check"></i> Votes actifs (@activeVotingLaws.Count)
            </button>
            <button class="btn btn-primary" @onclick="ShowAllLaws">
                <i class="bi bi-list"></i> Toutes les lois (@laws.Count)
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Chargement...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var law in displayedLaws)
            {
                <div class="col-md-6 col-lg-4 mb-4">
                    <div class="card h-100 @GetCardClass(law)">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <span class="badge @GetTypeColor(law.Type)">@GetTypeName(law.Type)</span>
                            <span class="badge @GetStatusColor(law.Status)">@GetStatusName(law.Status)</span>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title">@law.Title</h5>
                            <p class="card-text">@law.Description</p>
                            
                            @if (law.Tags.Any())
                            {
                                <div class="mb-2">
                                    @foreach (var tag in law.Tags)
                                    {
                                        <span class="badge bg-secondary me-1">#@tag</span>
                                    }
                                </div>
                            }

                            <small class="text-muted">
                                Proposé par: @law.CreatedBy<br />
                                Date: @law.CreatedDate.ToString("dd/MM/yyyy")
                            </small>

                            @if (law.IsVotingActive)
                            {
                                <div class="mt-2">
                                    <div class="progress mb-2" style="height: 20px;">
                                        <div class="progress-bar bg-success" role="progressbar" 
                                             style="width: @(GetVotePercentage(law, VoteChoice.For))%" 
                                             title="Pour: @law.VotesFor votes">
                                            @law.VotesFor
                                        </div>
                                        <div class="progress-bar bg-danger" role="progressbar" 
                                             style="width: @(GetVotePercentage(law, VoteChoice.Against))%" 
                                             title="Contre: @law.VotesAgainst votes">
                                            @law.VotesAgainst
                                        </div>
                                        <div class="progress-bar bg-warning" role="progressbar" 
                                             style="width: @(GetVotePercentage(law, VoteChoice.Abstain))%" 
                                             title="Abstention: @law.VotesAbstain votes">
                                            @law.VotesAbstain
                                        </div>
                                    </div>
                                    <small class="text-muted">Total: @law.TotalVotes votes</small>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary w-100" @onclick="() => ViewLaw(law.Id)">
                                @if (law.IsVotingActive)
                                {
                                    <i class="bi bi-ballot-check"></i> <text>Voter</text>
                                }
                                else
                                {
                                    <i class="bi bi-eye"></i> <text>Consulter</text>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!displayedLaws.Any())
        {
            <div class="text-center mt-5">
                <i class="bi bi-search display-1 text-muted"></i>
                <h3 class="mt-3">Aucune loi trouvée</h3>
                <p class="text-muted">Essayez de modifier vos critères de recherche.</p>
            </div>
        }
    }
</div>

@code {
    private List<Law> laws = new();
    private List<Law> activeVotingLaws = new();
    private List<Law> displayedLaws = new();
    private bool isLoading = true;
    private string searchQuery = "";
    private string selectedType = "";
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadLaws();
    }

    private async Task LoadLaws()
    {
        isLoading = true;
        laws = await LawService.GetLawsAsync();
        activeVotingLaws = await LawService.GetActiveVotingLawsAsync();
        displayedLaws = laws.ToList();
        isLoading = false;
        StateHasChanged();
    }

    private async Task SearchLaws()
    {
        isLoading = true;
        
        LawType? typeFilter = null;
        if (!string.IsNullOrEmpty(selectedType) && Enum.TryParse<LawType>(selectedType, out var parsedType))
            typeFilter = parsedType;

        LawStatus? statusFilter = null;
        if (!string.IsNullOrEmpty(selectedStatus) && Enum.TryParse<LawStatus>(selectedStatus, out var parsedStatus))
            statusFilter = parsedStatus;

        displayedLaws = await LawService.SearchLawsAsync(searchQuery, typeFilter, statusFilter);
        isLoading = false;
        StateHasChanged();
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchLaws();
        }
    }

    private void ShowActiveVotes()
    {
        displayedLaws = activeVotingLaws.ToList();
        StateHasChanged();
    }

    private void ShowAllLaws()
    {
        displayedLaws = laws.ToList();
        StateHasChanged();
    }

    private void ViewLaw(int lawId)
    {
        Navigation.NavigateTo($"/law/{lawId}");
    }

    private string GetCardClass(Law law)
    {
        return law.IsVotingActive ? "border-success" : "";
    }

    private string GetTypeColor(LawType type)
    {
        return type switch
        {
            LawType.Law => "bg-primary",
            LawType.Decree => "bg-info",
            LawType.Amendment => "bg-warning",
            LawType.Referendum => "bg-danger",
            LawType.LocalInitiative => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetTypeName(LawType type)
    {
        return type switch
        {
            LawType.Law => "Loi",
            LawType.Decree => "Décret",
            LawType.Amendment => "Amendement",
            LawType.Referendum => "Référendum",
            LawType.LocalInitiative => "Initiative locale",
            _ => type.ToString()
        };
    }

    private string GetStatusColor(LawStatus status)
    {
        return status switch
        {
            LawStatus.Voting => "bg-success",
            LawStatus.UnderReview => "bg-warning",
            LawStatus.Passed => "bg-success",
            LawStatus.Rejected => "bg-danger",
            LawStatus.Draft => "bg-secondary",
            LawStatus.Implemented => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusName(LawStatus status)
    {
        return status switch
        {
            LawStatus.Voting => "En vote",
            LawStatus.UnderReview => "En révision",
            LawStatus.Passed => "Adoptée",
            LawStatus.Rejected => "Rejetée",
            LawStatus.Draft => "Brouillon",
            LawStatus.Implemented => "Implémentée",
            _ => status.ToString()
        };
    }

    private double GetVotePercentage(Law law, VoteChoice choice)
    {
        if (law.TotalVotes == 0) return 0;
        
        return choice switch
        {
            VoteChoice.For => (double)law.VotesFor / law.TotalVotes * 100,
            VoteChoice.Against => (double)law.VotesAgainst / law.TotalVotes * 100,
            VoteChoice.Abstain => (double)law.VotesAbstain / law.TotalVotes * 100,
            _ => 0
        };
    }
}